# Compute descriptors (machine learning features):
computeDescriptors = function(df)
{
descpt = NULL
for(prec in unique(df$PrecursorName.Replicate))
{
tb = df[which(df$PrecursorName.Replicate == prec),]
# Library descriptors:
x = tb[1,c("PrecursorName", "Replicate")]
x$DIA.cosSim = NA
if(tb$CountDetectedFragments[1] >= 1)
x$DIA.cosSim = cosineSimimilarity(tb$Area, tb$LibraryIntensity)
# LC peak shape descriptors:
x$DIA.RTdiffSd = sd(tb$Precursor.RT[1] - tb$Retention.Time)
x$DIA.RTdiffMean = mean(tb$Precursor.RT[1] - tb$Retention.Time)
x$DIA.FWHMdiffSd = sd(tb$Precursor.Fwhm[1] - tb$Fwhm)
x$DIA.FWHMdiffMean = mean(tb$Precursor.Fwhm[1] - tb$Fwhm)
# Mass error descriptor:
x$DIA.MassErrorSd = sd(tb$Mass.Error.PPM)
x$DIA.MassErrorMean = mean(tb$Mass.Error.PPM)
descpt = rbind(descpt, x)
}
return(descpt)
}
# --------------------------------------------------------------------------------
# Calculate descriptors:
descriptors = computeDescriptors(dat)
descriptors = descriptors[which(descriptors$DIA.cosSim > 0), ]
# Score samples with trained model:
pred = predict(model, descriptors[,-(1:2)], probability = TRUE)
summary(pred)
prob = as.data.frame(attr(pred, "probabilities"))
descriptors$moleculeID = rownames(descriptors)
prob$moleculeID = rownames(prob)
prob$decoy = NULL
descriptors = merge(descriptors, prob, by="moleculeID", all.x = TRUE)
colnames(descriptors)[colnames(descriptors) == "target"] = "PeakDecoderScore"
descriptors$moleculeID = NULL
hist(descriptors$PeakDecoderScore, 30)
# --------------------------------------------------------------------------------
# Create final result table:
outTab = dat[which(dat$ProductName == "precursor"), c("PrecursorName",
"Precursor.Mz",
"Retention.Time",
"Collisional.Cross.Section",
"methodCE",
"Replicate",
"Total.Area",
"SignalToNoise",
"Mass.Error.PPM",
"RetentionTime.Error",
"CCS.Error",
"CountDetectedFragments")]
outTab = merge(outTab, descriptors, by=c("PrecursorName", "Replicate"), all.x = TRUE)
# --------------------------------------------------------------------------------
# Calculate CCS error using MS-Dial results:
pathToMSdial = "xMSDIAL"
myPattern = ".+Min20\\.txt$"
featureFiles = list.files(path=pathToMSdial, pattern = myPattern, full.names = FALSE)
# iterate each file of features
for(f in featureFiles)
{
feats = read.csv(file = file.path(pathToMSdial, f), sep = "\t", stringsAsFactors = FALSE)
feats = feats[which(feats$CCS > 0), ] # remove features without CCS
# Find the replicates with a substring contained in the file name (Skyline removed the common prefix and suffix in file names):
indexes = which(lapply(outTab$Replicate,function(x) grepl(x,f)) ==  TRUE)
for(k in indexes)
{
x = feats[which(abs(feats$Precursor.m.z - outTab$Precursor.Mz[k]) <= 0.02 &
abs(feats$RT..min. - outTab$Retention.Time[k]) <= cutoff.RT.Error), ]
if(nrow(x) > 0)
{
minx = which.min(abs(x$CCS - outTab$Collisional.Cross.Section[k]))
outTab$CCS.Error[k] = (x$CCS[minx] - outTab$Collisional.Cross.Section[k])/outTab$Collisional.Cross.Section[k] * 100
}
}
}
# Apply filtering thresholds:
outTab$ConfidenceDescription = "None"
outTab$ConfidenceDescription[which(abs(outTab$Mass.Error.PPM) <= cutoff.Mz.Error &
abs(outTab$CCS.Error) <= cutoff.CCS.Error &
abs(outTab$RetentionTime.Error) <= cutoff.RT.Error)] = "RT-CCS"
outTab$ConfidenceDescription[which(outTab$PeakDecoderScore >= cutoff.PeakDecoderScore &
outTab$ConfidenceDescription == "RT-CCS")] = "RT-CCS-DIA"
# Exclude "RT-CCS" which have fragments but low combined score:
outTab$ConfidenceDescription[which((outTab$PeakDecoderScore < cutoff.PeakDecoderScore | is.na(outTab$PeakDecoderScore)) &
outTab$CountDetectedFragments > 0 &
outTab$ConfidenceDescription == "RT-CCS")] = "None"
outUniqueBest = outTab[which(outTab$SignalToNoise > cutoff.SignalToNoise), ]
outUniqueBest = outUniqueBest[with(outUniqueBest, order(PrecursorName, ConfidenceDescription, -PeakDecoderScore, abs(CCS.Error))), ]
outUniqueBest = outUniqueBest[!duplicated(outUniqueBest[,c("PrecursorName", "ConfidenceDescription")]),]
# Calculate rank confidence level, take best per metabolite:
outUniqueBest$ConfidenceLevel = 0
outUniqueBest$ConfidenceLevel[grep("RT-CCS", outUniqueBest$ConfidenceDescription)] = 1
outUniqueBest$ConfidenceLevel[grep("RT-CCS-DIA", outUniqueBest$ConfidenceDescription)] = 2
outUniqueBest = outUniqueBest[with(outUniqueBest, order(PrecursorName, -ConfidenceLevel, -PeakDecoderScore, abs(CCS.Error))), ]
outUniqueBest = outUniqueBest[!duplicated(outUniqueBest[,c("PrecursorName")]),]
# Save output table:
write.csv(outUniqueBest, file = paste("PeakDecoder-InferenceResults_", sampleString, "_", Sys.Date(), ".csv", sep=''), row.names = FALSE)
outUniqueBest = outUniqueBest[which(outUniqueBest$ConfidenceDescription != "None"), ]
# Save number of metabolites per confidence level:
sink(paste("PeakDecoder-InferenceSummary_", sampleString, "_", Sys.Date(), ".txt", sep=''))
print("# Unique identified metabolites: ")
table(outUniqueBest$ConfidenceDescription)
print("---------------------------------------")
print("# Total annotated metabolite features: ")
table(outTab$ConfidenceDescription[which(outTab$ConfidenceDescription != "None")])
sink() # close output file
# Save quantitation table:
write.csv(outTab[which(outTab$PrecursorName %in% unique(outUniqueBest$PrecursorName)), c("PrecursorName", "Replicate", "Total.Area")],
file = paste("Detected-molecules-quantitation_", sampleString, "_", Sys.Date(), ".csv", sep=''), row.names = FALSE)
# Save all-metrics table:
write.csv(outTab[which(outTab$PrecursorName %in% unique(outUniqueBest$PrecursorName)), ],
file = paste("Detected-molecules-all-metrics-replicates_", sampleString, "_", Sys.Date(), ".csv", sep=''), row.names = FALSE)
# ---------------------------------------------------
manualIDs = read.csv(file = paste("Detected-metabolites-manual_", sampleString, ".csv", sep=''), stringsAsFactors = FALSE)
print("Metabolites detected manually but missed by PeakDecoder:")
setdiff(manualIDs$Metabolite, outUniqueBest$PrecursorName)
print("Metabolites detected by PeakDecoder but missed manually:")
setdiff(outUniqueBest$PrecursorName, manualIDs$Metabolite)
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
library(ggplot2)
View(dat)
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of Precursor")
p = p + theme_bw()
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(dat$CCS.Error <= 1),]
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of Precursor")
p = p + theme_bw()
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 1),]
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of Precursor")
p = p + theme_bw()
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 1),]
pdfFileName = "/Users/bilb280/Documents/MyProjects/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
dev.off() # close .pdf file
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 1),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
dev.off() # close .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 30))
View(dat)
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
View(dat)
p = ggplot(dat, aes(CCS.Error, RetentionTime.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point(position="dodge", alpha = 0.8, colour="black"))
p = ggplot(dat, aes(CCS.Error, RetentionTime.Error, colour=PrecursorName))
#p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point(position="dodge", alpha = 0.8))
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 1),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
p = ggplot(dat, aes(CCS.Error, RetentionTime.Error, colour=PrecursorName))
#p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point(position="dodge", alpha = 0.8))
dev.off() # close .pdf file
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 1),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
p = ggplot(dat, aes(CCS.Error, RetentionTime.Error, colour=PrecursorName))
#p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
dev.off() # close .pdf file
p = ggplot(dat, aes(CCS.Error, RetentionTime.Error, colour=PrecursorName))
#p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
colnames(dat)
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
#p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
View(dat)
p = ggplot(dat, aes(CCS.Error, RetentionTime.Error * 100, colour=PrecursorName))
#p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
colnames(dat)
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
p = p + ylab("CCS error (%)")
p = p + ylab("RT (min)")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
p = p + xlab("CCS error (%)")
p = p + ylab("RT (min)")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
summary(dat)
View(dat)
dat = dat[which(abs(dat$CCS.Error) < 0.2),]
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 0.3),]
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 0.3),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
p = p + xlab("CCS error (%)")
p = p + ylab("RT (min)")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
dev.off() # close .pdf file
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 1),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
p = p + xlab("CCS error (%)")
p = p + ylab("RT (min)")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
dev.off() # close .pdf file
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(rows=1, facets = PrecursorName)
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(PrecursorName, rows=1)
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(rows=PrecursorName)
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(PrecursorName~ ., scales = "free")
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(.~PrecursorName, scales = "free")
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 0.7),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 100))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(.~PrecursorName, scales = "free")
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
p = p + xlab("CCS error (%)")
p = p + ylab("RT (min)")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
dev.off() # close .pdf file
# Read results files:
inputFileSamples = "/Users/bilb280/Documents/MyProjects/Kristin_CRADA/a_SyntheticBio/data/Asper/Detected-molecules-all-metrics-replicates_Asper_2022-06-27.csv"
dat = read.csv(file = inputFileSamples, sep = ',', stringsAsFactors = FALSE)
dat = dat[grep("09_|10_", dat$PrecursorName), ]
dat = dat[which(abs(dat$CCS.Error) < 0.7),]
pdfFileName = "/Users/bilb280/Documents/MyDraftPapers/a_SyntheticBio/Figures/CCS-error-3HP-lactic.pdf"
library(ggplot2)
pdf(pdfFileName, paper="a4r", useDingbats=FALSE) # create .pdf file
# Plot CCS error for lactic and 3HP:
p = ggplot(dat, aes(CCS.Error, fill=PrecursorName))
p = p + ylab("Number of samples")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_histogram(position="dodge", alpha = 0.8, colour="black", bins = 20))
p = ggplot(dat, aes(PrecursorName, CCS.Error, fill=PrecursorName))
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
p = p + facet_grid(.~PrecursorName, scales = "free")
plot(p + geom_boxplot(alpha = 0.8, colour="black"))
p = ggplot(dat, aes(CCS.Error, Retention.Time, colour=PrecursorName))
p = p + xlab("CCS error (%)")
p = p + ylab("RT (min)")
p = p + theme_bw()
p = p + theme(legend.position="bottom")
p = p + theme(text=element_text(size = 30), axis.title = element_text(size = 30),
axis.text.x = element_text(angle = 40, hjust = 1))
plot(p + geom_point( alpha = 0.8))
dev.off() # close .pdf file
